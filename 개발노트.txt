[Application]
@SpringBootApplication
 - 스프링부트의 자동설정, 스프링 Bean 읽기와 생성을 모두 자동으로 설정
 - 해당 위치부터 설정을 읽음 -> 항상 프로젝트 최상단에 위치해야함
SpringApplication.run
 - 별도 외부 WAS를 두지 않고 애플리케이션 실행 시 내부 wAS를 실행
 - 톰캣 설치 불필요
 - 스프링 부트에서는 내장 WAS를 사용하는 것을 권장
 - 언제 어디서나 같은 환경에서 스프링 부트를 배포할수 있음.

[Domain]
@Entity
 - 테이블과 링크될 클래스
 - 카멜케이스와 언더스코어네이밍(_) 매칭
@Id
 - 테이블의 PK 필드
@GeneratedValue
 - PK 생성 규칙
 - GenerationType.IDENTITY: auto_increment
@Column
 - 테이블 칼럼

[라이브러리]
lombok
 - 자바 개발시 자주 사용하는 코드(Getter, Sette, 기본생성자, toString 등)을 어노테이션으로 자동 생성
 @Getter
  - 선언된 모든 필드의 get 메소드를 생성해 준다.
 @RequiredArgsConstructor
  - 선언된 모든 final 필드가 포함된 생성자를 생성해 준다.
  - final이 없는 필드는 생성자에 포함되지 않는다.

[Package]
.web
 - 컨트롤러와 관련된 클래스들 호판
 @RestController
  - 컨트롤러를 JSON을 반환하는 컨트롤러로 만듬
 @GetMapping
  - HTTP Method인 Get의 요청을 받을 수 있는 API를 만들어 줌

[Test]
@RunWith(SpringRunner.class)
 - 테스트 진행 시 JUnit 내장 실행자 외 다른 실행자를 실행
 - 스프링 부트 테스트와 JUnit 사이에 연결자 역할
@WebMvcTest(controllers = HelloController.class)
 - 여러 스프링 테스트 어노테이션 중 , Web(Spring MVC)에 집중 라 수 있는 어노테이션
@Autowired
 - 스프링이 관리하는 빈(Bean)을 주입 받는다.
private MockMvc mvc
 - 웹 API를 테스트할 때 사용
 - 스프링 MVC 테스트의 시작접
 - 이 클래스를 통해 HTTP GET, POST등에 대한 API 테스트를 할 수 있다.
mvc.perform(get("/hello"))
 - MockMvc를 통해 /hello 주소로 HTTP GET요청을 한다.
 - 체이닝이 지원되어 아래와 같은 여러 검증 기능을 이어서 선언할 수 있다.
.andExpect(status().isOk())
 - mvc.perform의 결과를 검증한다.
 - HTTP Header의 Status를 검증한다.(200(Ok), 404, 500 등)
.andExpect(content().string(hello))
 - mvc.perform의 결과를 검증한다.
 - 응답 본문의 내용을 검증한다.("hello" 문자열 반환 검증)
assertThat
 - assertj라는 테스트 검증 라이브러리의 검증 메소드
 - 검증하고 싶은 대상을 메소드 인자로 받는다.
 - 메소드 체이닝이 지원되어 isEqualTo와 같은 메소드를 이어서 사용할 수 있다.
.param
 - API 테스트할 때 사용될 요청 파라미터를 설정한다.
 - 값은 String만 허용(숫자/날짜 등 모든 데이터 문자열로 변경 필요)
jsonPath
 - JSON 응답값을 필드별로 검증할 수 있는 메소드
 - $를 기준으로 필드명을 명시한다.($.name, $.amount)
@After
 - 단위 테스트가 끝날 때마다 수행되는 메소드

[dependencys]
spring-boot-starter-data-jpa
 - 스프링 부트용 추상화 라이브러리
 - JPA관련 라이브러리들 버전 관리
h2
 - 인메모리 관계형 데이터베이스
 - 애플리케이션 재시작시 초기화 됨

[scope=profile,email]
 - scope 지정 안하면 기본 openid, profile, email 등록
 - openid가 있으면 Open Id Provider로 인식함
 - 구글과 타 서비스 구분하여 OAuth2Service를 만들어야하므로 지정하여 제외